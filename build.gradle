import org.gradle.internal.jvm.Jvm

plugins {
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'net.researchgate.release' version '2.8.1'
    id 'org.sonarqube' version '2.6'
    id 'org.unbroken-dome.test-sets' version '3.0.1'
    id 'com.github.psxpaul.execfork' version '0.1.13'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.dorongold.task-tree' version '1.5'
    id 'org.springframework.boot' version '2.4.5'
//    id "com.github.spotbugs" version "4.7.1"
}

archivesBaseName = 'spring-cloud-ribbon-extensions'
group = 'com.github.enadim'
sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.bootJar {enabled = false}
tasks.jar {enabled = true}

ext {
    jcenterUrl = project.hasProperty('customJcenterUrl') ? project.customJcenterUrl : 'https://jcenter.bintray.com/'
    mavenUrl = project.hasProperty('customMavenUrl') ? project.customMavenUrl : 'https://repo.maven.apache.org/maven2/'
    customSpringMilestoneUrl = project.hasProperty('customSpringMilestoneUrl') ? project.customSpringMilestoneUrl : 'https://repo.spring.io/libs-milestone/'
    mavenPluginsUrl = project.hasProperty('customMavenPluginsUrl') ? project.customMavenPluginsUrl : 'https://plugins.gradle.org/m2/'

    jvm = Jvm.current()
    javaDescription = '' + jvm
    javaVersion = '' + JavaVersion.current()

    projectUrl = 'https://github.com/enadim/' + archivesBaseName
    projectDescription = 'Netflix ribbon extensions.'
    projectScmUrl = 'scm:git:' + projectUrl + '.git'

    licenseName = 'The Apache License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

    authorId = 'enadim'
    authorName = 'Nadim Benabdenbi'
    authorEmail = 'nadim.benabdenbi@gmail.com'

    gitCommitId = 'git rev-parse HEAD'.execute().text.trim()
    gitBranchName = 'git name-rev --name-only HEAD'.execute().text.trim()
    isReleaseVersion = !version.endsWith('SNAPSHOT')
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.sonarqube'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'project-report'
apply plugin: 'build-dashboard'
apply plugin: 'com.github.psxpaul.execfork'
apply from: 'gradle/ide.gradle'
apply from: 'gradle/license.gradle'
apply from: 'gradle/coding.gradle'
apply from: 'gradle/tests.gradle'
apply from: 'gradle/jacoco.gradle'
apply from: 'gradle/artifacts.gradle'
apply from: 'gradle/signing.gradle'
apply from: 'gradle/release.gradle'
apply plugin: 'com.dorongold.task-tree'

//task wrapper(type: Wrapper) {
//    gradleVersion = '5.6.4'
//}

repositories {
    mavenLocal()
    maven {
        url mavenUrl
    }
    maven {
        url customSpringMilestoneUrl
    }
    jcenter {
        url jcenterUrl
    }
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2020.0.2'
//        mavenBom 'org.springframework.boot:spring-boot:2.4.5'
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
//    compileOnly 'com.google.code.findbugs:annotations:3.0.1'

    compile("org.springframework.boot:spring-boot-starter-activemq:2.4.5") { ext.optional = true }
    compile('com.netflix.ribbon:ribbon-eureka:2.7.18') {ext.optional = true }
    compile("org.apache.activemq:activemq-broker:5.16.1") { ext.optional = true }
    compile("com.fasterxml.jackson.core:jackson-databind") { ext.optional = true }
    //compile('org.springframework.cloud:spring-cloud-starter-config') { ext.optional = true }
    compile('org.springframework.cloud:spring-cloud-starter-netflix-ribbon:2.2.8.RELEASE') { ext.optional = true }
    compile('org.springframework.cloud:spring-cloud-starter-openfeign') { ext.optional = true }
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client') { ext.optional = true }
    compile('org.springframework.cloud:spring-cloud-starter-netflix-zuul:2.2.8.RELEASE') { ext.optional = true }
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-server') {
        exclude group: 'javax.servlet', module: 'servlet-api'
        ext.optional = true
    }
    compile('org.apache.activemq:artemis-jms-server:2.17.0') { ext.optional = true }
    compile("org.springframework.boot:spring-boot-starter-activemq") {
        ext.optional = true
        exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jms_1.1_spec'
    }

    testCompile 'org.springframework.boot:spring-boot-starter-web'
    testCompile 'org.springframework.boot:spring-boot-test'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.mockito:mockito-core:2.18.0'
    testCompile 'net.bytebuddy:byte-buddy:1.8.5'
    testCompile 'io.rest-assured:rest-assured:3.0.7'

    examplesCompileOnly 'org.projectlombok:lombok:1.18.20'
}

compileJava {
    options.fork = true
}
compileJava.group 'build'
compileTestJava.group 'build'
processResources.group 'build'
sourcesJar.group 'build'
javadocJar.group 'build'
testSourcesJar.group 'build'
testJar.group 'build'
processTestResources.group 'build'
install.group 'build'
dependencyReport.group 'report'
htmlDependencyReport.group 'report'
taskReport.group 'report'
propertyReport.group 'report'

allprojects {
    task resolveAllDependencies {
        doLast {
            configurations.all { it.resolve() }
        }
    }
}