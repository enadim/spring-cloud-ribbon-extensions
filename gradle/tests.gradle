buildscript {
    repositories {
        mavenLocal()
        maven {
            url mavenPluginsUrl
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.psxpaul:gradle-execfork-plugin:0.1.6"
    }
}

ext {
    examplesLauncherPath = project.buildDir.absolutePath + '/libs/spring-cloud-ribbon-extensions-examples-launcher-' + version + '.jar'
    examplesLauncherClasspath = files(examplesLauncherPath)
}

apply plugin: com.github.psxpaul.ExecForkPlugin

test {
    ignoreFailures = project.hasProperty('ignoreFailures')
}

testSets {
    examples {
        createArtifact = true
        dirName = 'examples'
    }
    integrationTest {
        dirName = 'it'
        createArtifact = true
    }
}

integrationTest {
    ignoreFailures = project.hasProperty('ignoreFailures')
}

String toPath(String x) {
    x = x.replaceAll("\\\\", "/")
    return x.startsWith("/") ? x : "/" + x
}

task examplesLauncherJar(type: Jar) {
    appendix = 'examples-launcher'
    from file(project.buildDir.absolutePath + '/classes/java/examples/Launcher.class')
    doFirst {
        manifest {
            attributes "Class-Path": configurations.runtime.files.collect { File file -> toPath(file.absolutePath) }.join(" ") +
                    " " + toPath(project.buildDir.absolutePath + '/classes/java/examples/') +
                    " " + toPath(project.buildDir.absolutePath + '/resources/examples/') +
                    " " + toPath(project.buildDir.absolutePath + '/classes/java/main/')
            attributes "Main-Class": 'Launcher'
        }
    }
}

task eureka(type: com.github.psxpaul.task.JavaExecFork) {
    main = 'com.github.enadim.spring.cloud.ribbon.examples.eureka.EurekaServer'
    classpath = files('.')
    jvmArgs = ['-Xms64m', '-Xmx64m', '-jar', examplesLauncherPath]
    workingDir = "$buildDir"
    standardOutput = "$buildDir/eureka.log"
    errorOutput = "$buildDir/eureka-error.log"
    waitForPort = 8000
    timeout = 30
}
eureka.group 'it'
eureka_stop.group 'it'
eureka.dependsOn examples
eureka.dependsOn examplesLauncherJar

task artemis(type: com.github.psxpaul.task.JavaExecFork) {
    main = 'com.github.enadim.spring.cloud.ribbon.examples.artemis.Artemis'
    classpath = files('.')
    jvmArgs = ['-Xms64m', '-Xmx64m', '-jar', examplesLauncherPath]
    workingDir = "$buildDir"
    standardOutput = "$buildDir/artemis.log"
    errorOutput = "$buildDir/artemis-error.log"
    waitForPort = 8002
    timeout = 30
}
artemis.group 'it'
artemis_stop.group 'it'
artemis.dependsOn eureka
artemis {
    doLast {
        sleep(1000)
    }
}
task jms(type: com.github.psxpaul.task.JavaExecFork) {
    main = 'com.github.enadim.spring.cloud.ribbon.examples.jms.JmsTest'
    classpath = files('.')
    jvmArgs = ['-Xms64m', '-Xmx64m', '-jar', examplesLauncherPath]
    workingDir = "$buildDir"
    standardOutput = "$buildDir/artemis.log"
    errorOutput = "$buildDir/artemis-error.log"
}
jms.group 'it'
jms_stop.group 'it'
jms.dependsOn artemis

task service2FavoriteZone1(type: com.github.psxpaul.task.JavaExecFork) {
    main = 'com.github.enadim.spring.cloud.ribbon.examples.service2.Service2'
    classpath = files('.')
    jvmArgs = ['-Xms64m', '-Xmx64m', '-jar', examplesLauncherPath]
    args = ['--spring.config.name=service2-FavoriteZone-zone1']
    workingDir = "$buildDir"
    standardOutput = "$buildDir/service2-FavoriteZone-zone1.log"
    errorOutput = "$buildDir/service2-FavoriteZone-zone1-error.log"
    waitForPort = 8021
    timeout = 30
}
service2FavoriteZone1 {
    doLast {
        sleep(1000)
    }
}
service2FavoriteZone1.group 'it'
service2FavoriteZone1_stop.group 'it'
service2FavoriteZone1.dependsOn jms

task service2FavoriteZone2(type: com.github.psxpaul.task.JavaExecFork) {
    main = 'com.github.enadim.spring.cloud.ribbon.examples.service2.Service2'
    classpath = files('.')
    jvmArgs = ['-Xms64m', '-Xmx64m', '-jar', examplesLauncherPath]
    args = ['--spring.config.name=service2-FavoriteZone-zone2']
    workingDir = "$buildDir"
    standardOutput = "$buildDir/service2-FavoriteZone-zone2.log"
    errorOutput = "$buildDir/service2-FavoriteZone-zone2-error.log"
    waitForPort = 8022
    timeout = 30
}
service2FavoriteZone2 {
    doLast {
        sleep(1000)
    }
}
service2FavoriteZone2.group 'it'
service2FavoriteZone2_stop.group 'it'
service2FavoriteZone2.dependsOn service2FavoriteZone1

task service1FavoriteZoneDeveloper(type: com.github.psxpaul.task.JavaExecFork) {
    main = 'com.github.enadim.spring.cloud.ribbon.examples.service1.Service1'
    classpath = files('.')
    jvmArgs = ['-Xms64m', '-Xmx64m', '-jar', examplesLauncherPath]
    args = ['--spring.config.name=service1-FavoriteZone-developer']
    workingDir = "$buildDir"
    standardOutput = "$buildDir/service1-FavoriteZone-developer.log"
    errorOutput = "$buildDir/service1-FavoriteZone-developer-error.log"
    waitForPort = 8019
    timeout = 30
}
service1FavoriteZoneDeveloper {
    doLast {
        sleep(1000)
    }
}
service1FavoriteZoneDeveloper.group 'it'
service1FavoriteZoneDeveloper_stop.group 'it'
service1FavoriteZoneDeveloper.dependsOn service2FavoriteZone2

task service1FavoriteZone1(type: com.github.psxpaul.task.JavaExecFork) {
    main = 'com.github.enadim.spring.cloud.ribbon.examples.service1.Service1'
    classpath = files('.')
    jvmArgs = ['-Xms64m', '-Xmx64m', '-jar', examplesLauncherPath]
    args = ['--spring.config.name=service1-FavoriteZone-zone1']
    workingDir = "$buildDir"
    standardOutput = "$buildDir/service1-FavoriteZone-zone1.log"
    errorOutput = "$buildDir/service1-FavoriteZone-zone1-error.log"
    waitForPort = 8011
    timeout = 30
}
service1FavoriteZone1 {
    doLast {
        sleep(1000)
    }
}
service1FavoriteZone1.group 'it'
service1FavoriteZone1_stop.group 'it'
service1FavoriteZone1.dependsOn service1FavoriteZoneDeveloper

task service1FavoriteZone2(type: com.github.psxpaul.task.JavaExecFork) {
    main = 'com.github.enadim.spring.cloud.ribbon.examples.service1.Service1'
    classpath = files('.')
    jvmArgs = ['-Xms64m', '-Xmx64m', '-jar', examplesLauncherPath]
    args = ['--spring.config.name=service1-FavoriteZone-zone2']
    workingDir = "$buildDir"
    standardOutput = "$buildDir/service1-FavoriteZone-zone2.log"
    errorOutput = "$buildDir/service1-FavoriteZone-zone2-error.log"
    waitForPort = 8012
    timeout = 30
}
service1FavoriteZone2 {
    doLast {
        sleep(1000)
    }
}
service1FavoriteZone2.group 'it'
service1FavoriteZone2_stop.group 'it'
service1FavoriteZone2.dependsOn service1FavoriteZone1

task service3StrictMatcherZone1(type: com.github.psxpaul.task.JavaExecFork) {
    main = 'com.github.enadim.spring.cloud.ribbon.examples.service3.Service3'
    classpath = files('.')
    jvmArgs = ['-Xms64m', '-Xmx64m', '-jar', examplesLauncherPath]
    args = ['--spring.config.name=service3-StrictMatcher-zone1']
    workingDir = "$buildDir"
    standardOutput = "$buildDir/service3-StrictMatcher-zone1.log"
    errorOutput = "$buildDir/service3-StrictMatcher-zone1-error.log"
    waitForPort = 8031
    timeout = 30
}
service3StrictMatcherZone1 {
    doLast {
        sleep(1000)
    }
}
service3StrictMatcherZone1.group 'it'
service3StrictMatcherZone1_stop.group 'it'
service3StrictMatcherZone1.dependsOn service1FavoriteZone2

task zuul(type: com.github.psxpaul.task.JavaExecFork) {
    main = 'com.github.enadim.spring.cloud.ribbon.examples.zuul.ZuulServer'
    classpath = files('.')
    jvmArgs = ['-Xms64m', '-Xmx64m', '-jar', examplesLauncherPath]
    workingDir = "$buildDir"
    standardOutput = "$buildDir/zuul.log"
    errorOutput = "$buildDir/zuul-error.log"
    waitForPort = 8001
    timeout = 30
}
zuul {
    doLast {
        sleep(3000)
    }
}
zuul.group 'it'
zuul_stop.group 'it'
zuul.dependsOn service3StrictMatcherZone1

examples.dependsOn test
if (project.hasProperty('it')) {
    zuul.dependsOn examples
    integrationTest.dependsOn zuul
    check.dependsOn integrationTest
    project.tasks["sonarqube"].dependsOn integrationTest
} else {
    project.tasks["sonarqube"].dependsOn test
}
processExamplesResources.group 'build'
compileExamplesJava.group 'build'
processIntegrationTestResources.group 'build'
compileIntegrationTestJava.group 'build'

checkstyleIntegrationTest.group 'coding'
checkstyleExamples.group 'coding'
//findbugsExamples.group 'coding'
//findbugsIntegrationTest.group 'coding'
//pmdExamples.group 'coding'
//pmdIntegrationTest.group 'coding'
licenseExamples.group 'license'
licenseFormatExamples.group 'license'
licenseFormatIntegrationTest.group 'license'
licenseFormatMain.group 'license'
licenseIntegrationTest.group 'license'
